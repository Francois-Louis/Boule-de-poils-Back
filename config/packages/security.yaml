security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                # api_login is a route we will create below
                check_path: /api/login_check
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_secure:
            pattern:   ^/api
            stateless: true
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider

            form_login:
                # name of the route created previously
                login_path: app_api_login # GET => affiche le form
                check_path: app_api_login # POST => traite le form

            logout:
                path: app_api_logout


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS}
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # page édition création du backoffice
        - { path: ^/back/(.*)/(new|edit), roles: ROLE_ADMIN}
        # Accès des associations à la gestion des animaux
        - { path: ^/back/(animal), roles: ROLE_ASSOCIATION}
        # # les utilisateurs doivent avoir accès à leur liste
        # - { path: ^/favorites, roles: ROLE_USER }

        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/user/form, roles: PUBLIC_ACCESS }
        - { path: ^/api,      roles: IS_AUTHENTICATED_FULLY }
        # Bien garder la ligne ci-dessus pour la fin
        - { path: ^/api,      roles: PUBLIC_ACCESS }

    role_hierarchy:
        # ASSOCIATION hérite du rôle USER
        ROLE_ASSOCIATION: ROLE_USER
        # ADMIN hérite du rôle ASSOCIATION
        ROLE_ADMIN: ROLE_ASSOCIATION

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon